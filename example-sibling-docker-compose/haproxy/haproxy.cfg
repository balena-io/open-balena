global
	tune.ssl.default-dh-param 1024
	# https://github.com/haproxytech/haproxy-lua-cors
	lua-load /usr/local/etc/haproxy/cors.lua
	# https://www.haproxy.com/blog/introduction-to-haproxy-logging/
	log stdout format raw daemon "${LOGLEVEL}"
	ssl-default-bind-options ssl-min-ver TLSv1.2
    tune.http.maxhdr 1024
    tune.bufsize 128000

defaults
	balance roundrobin
	default-server init-addr last,libc,none
	default-server inter 3s rise 2 fall 3
	log global
	mode http
	option contstats
	option dontlognull
	option forwardfor
	option httplog
	timeout client 63s
	timeout connect 5s
	timeout http-keep-alive 1s
	timeout http-request 63s
	timeout server 63s
	timeout tunnel 3600s


resolvers docker-bridge-resolver
	nameserver docker-resolver 127.0.0.11:53
	hold valid 0ms

http-errors balena-http-errors
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 401 /etc/haproxy/errors/401.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 404 /etc/haproxy/errors/404.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http


# routes between OpenVPN, SSL and HTTPS traffic
frontend tcp-router
	mode tcp
	option tcplog
	log-format "%ci:%cp [%t] %ft %b/%s %Tw/%Tc/%Tt %B %ts %ac/%fc/%bc/%sc/%rc %sq/%bq"
	bind :::443 v4v6
	tcp-request inspect-delay 2s
	tcp-request content accept if { req.ssl_hello_type 1 }
	acl is_ssl req.ssl_ver 2:3.4

	# The tunnel is encrypted TCP traffic, but not https.
	acl sni-host-tunnel req_ssl_sni -m beg "tunnel.openbalena."
	use_backend redirect-to-tunnel if sni-host-tunnel

	# or VPN
	use_backend vpn_backend if !is_ssl

    # Single ACL to match multiple subdomains of openbalena
    acl openbalena_subdomains req.ssl_sni -m reg -i ^(api|ca|minio|ocsp|registry2|s3)\.openbalena\. is_ssl

    use_backend openbalena_backend if openbalena_subdomains
	# everything else => HTTPS
	use_backend redirect-to-https if is_ssl

backend redirect-to-tunnel
	mode tcp
	server openbalena openbalena:3129 send-proxy-v2

backend redirect-to-https
	mode tcp
	server localhost 127.0.0.1:444 send-proxy-v2

frontend https
	bind 127.0.0.1:444 ssl crt "${CERT_CHAIN_PATH}" alpn h2,http/1.1 accept-proxy
	default_backend api-backend
	errorfiles balena-http-errors
	http-request add-header X-Forwarded-Proto https
	http-request capture req.hdr(Host) len 15
	http-response lua.cors
	log-format "%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r"


    acl path_auth path_beg /v1/auth/
    acl path_storage path_beg /v1/storage/
    acl path_graphql path_beg /v1/ /v2/ /console /healthz
    acl path_webrtc path_beg /webrtc
    acl is_grafana req.ssl_sni -m end -i grafana.

    use_backend hasura_auth_backend if path_auth
    use_backend hasura_storage_backend if path_storage
    use_backend graphql_engine_backend if path_graphql
    
    # Default backend for all other paths
    default_backend web_backend

# Open Balena: The server name matches the haproxy alias on the openbalena network in the open balena docker-compose.yml
backend openbalena_backend
    mode tcp
	server openbalena openbalena:443 resolvers docker-bridge-resolver resolve-prefer ipv4 check port 443

# Open Balena VPN: The server name matches the VPN alias on the openbalena network in the open balena docker-compose.yml
backend vpn_backend
	mode tcp
	server openvpn openbalena-vpn:443 resolvers docker-bridge-resolver resolve-prefer ipv4 send-proxy-v2 check-send-proxy check port 443


# Some generic web servers e.g. a local nhost.io deployment
backend web_backend
    mode http
	server webserver webserver:3000 resolvers docker-bridge-resolver resolve-prefer ipv4 check
    # todo: continue heres

backend hasura_auth_backend
    mode http
    # http-request set-path "%[path,regsub(^/v1/auth/,/)]"
    http-request replace-path /v1/auth(/)?(.*) /\2
    server hasura-auth hasura-auth:4000

backend hasura_storage_backend
    mode http
    # http-request set-path "%[path,regsub(^/v1/storage/,/v1/)]"
    http-request replace-path /v1/storage(/)?(.*) /v1/\2
    server hasura-storage hasura-storage:8000 

backend graphql_engine_backend
    mode http
    option http-server-close
    http-request set-header Host host
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    server graphql-engine graphql-engine:8080 resolvers docker-bridge-resolver resolve-prefer ipv4 check

