#!/bin/sh

set -e

CN=$1
OUT=${2:-.}

CA="${CN}-ca"
CA_FILE="${OUT}/ca"
CN_FILE="${OUT}/root"

CN_EXPIRY_DAYS=730
CA_EXPIRY_DAYS=3650

usage() {
  echo "usage: $0 HOST_NAME [OUT]"
  echo
  echo "  HOST_NAME   the domain name the certificate is valid for, eg. example.com"
  echo "  OUT         path to output directory generated files will be placed in"
  echo
}

if [ -z "$CN" ]; then
  usage
  exit 1
fi

cat > "${CN_FILE}.v3.ext" <<STR
authorityKeyIdentifier = keyid,issuer
basicConstraints = CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names

[alt_names]
DNS.1 = *.${CN}
STR

# Create a secret key and CA file for the self-signed CA
openssl genrsa -out "${CA_FILE}.key" 2048 2>/dev/null
openssl req -x509 -new -nodes -sha256 -days $CA_EXPIRY_DAYS -key "${CA_FILE}.key" -subj "/CN=${CA}" -out "${CA_FILE}.pem" 2>/dev/null

# Create a secret key and Certificate Signing Request (CSR) for the domain
openssl genrsa -out "${CN_FILE}.key" 2048 2>/dev/null
openssl req -new -key "${CN_FILE}.key" -subj "/CN=${CN}" -out "${CN_FILE}.csr" 2>/dev/null

# Sign the request with the self-signed CA and extension file
openssl x509 -req -sha256 -days $CN_EXPIRY_DAYS -in "${CN_FILE}.csr" -CA "${CA_FILE}.pem" -CAkey "${CA_FILE}.key" -CAcreateserial -out "${CN_FILE}.pem" -extfile "${CN_FILE}.v3.ext" 2>/dev/null

# Create the custom certificate chain file
cat "${CN_FILE}.pem" "${CA_FILE}.pem" "${CN_FILE}.key" >"${CN_FILE}.chain.pem"

# Cleanup
rm "${CA_FILE}.key" "${CA_FILE}.pem" "${CN_FILE}.key" "${CN_FILE}.pem" "${CN_FILE}.csr" "${CN_FILE}.v3.ext"

echo "ROOT_CA=${CN_FILE}.chain.pem"
